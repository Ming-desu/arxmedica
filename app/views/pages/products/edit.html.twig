{% extends "/layouts/main.html.twig" %}

{% block title %}
  Products
{% endblock %}

{% block main %}
  <div class="container">
    <div class="d-flex justify-content-between">
      <div>
        <h1 class="h2">Edit existing product</h1>
        <p class="text-muted">Fill up all the required fields.</p>
      </div>
      <form action="{{ base_url }}/products/delete" method="POST" name="delete">
        <input type="hidden" name="id" value="{{ product.id }}">
        <button type="submit" class="btn btn-danger" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Delete</button>
      </form>
    </div>
    <form action="{{ base_url }}/products/update" method="POST" name="update" class="row" novalidate>
      <input type="hidden" name="id" value="{{ product.id }}">
      <div class="col-md-6 col-lg-7 mb-4">
        <div class="card">
          <div class="card-body">
            <h5 class="m-0">General Information</h5>
            <p class="card-text">
              <small class="text-muted">Specify the details of the product.</small>
            </p>
            <div id="alert"></div>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="product_brand" class="form-label">Product brand</label>
                <input type="text" id="product_brand" class="form-control" name="brand" placeholder="Del Monte" value="{{ product.brand }}">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="product_description" class="form-label">Product description</label>
                <input type="text" id="product_description" class="form-control" name="description" placeholder="Fiber Enriched" value="{{ product.description }}">
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="col-md-6 col-lg-5 mb-4">
        <div class="card">
          <div class="card-body">
            <h5 class="m-0">Organization</h5>
            <p class="card-text">
              <small class="text-muted">Define some key attributes for the product.</small>
            </p>
            <div class="mb-2">
              <label for="product_category">Category</label>
              <input type="text" id="product_category" list="categories" class="form-control" name="category" placeholder="Beverages" value="{{ product.category }}">
              <datalist id="categories"></datalist>
            </div>
            <div class="mb-2">
              <label for="product_unit">Unit</label>
              <input type="text" id="product_unit" list="units" class="form-control" name="unit" placeholder="Boxes" value="{{ product.unit }}">
              <datalist id="units"></datalist>
            </div>
          </div>
        </div>
      </div>
      <div class="text-right">
        <a href="{{ base_url }}/products" class="btn btn-light mr-2">Cancel</a>
        <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Save Changes</button>
      </div>
    </form>
  </div>
{% endblock %}
{% block script %}
  <script src="/js/helpers/base.js"></script>
  <script>
    const formUpdate = document.forms.update;
    const formDelete = document.forms.delete;
    const productCategory = document.getElementById('product_category');
    const productUnit = document.getElementById('product_unit');
    const categories = document.getElementById('categories');
    const units = document.getElementById('units');

    validate.validators.presence.message = "must not be left empty.";
    const constraints = {
      description: {
        presence: {
          allowEmpty: false
        }
      },
      category: {
        presence: {
          allowEmpty: false
        }
      },
      unit: {
        presence: {
          allowEmpty: false
        }
      }
    };

    const handleFormSubmit = async function(e) 
    {
      e.preventDefault();

      closeAlert();
      let errors = validate(this, constraints, {format: 'flat'});
      showError(errors || [], this);

      if (errors)
        return false;

      let category_id = await isInDataList(this.category.value, categories);

      if (!category_id)
        return showError(['Please select a valid category.']);

      let unit_id = await isInDataList(this.unit.value, units);

      if (!unit_id)
        return showError(['Please select a valid unit.']);
      
      this.submit.disabled = true;
      try {
        await update(this.action, {
          id: this.id.value,
          category_id,
          unit_id,
          brand: this.brand.value,
          description: this.description.value
        });

        window.location.href = '{{ base_url }}/products';
      }
      catch(err) {}
      this.submit.disabled = false;
    };

    const handleFormDeleteSubmit = async function(e) 
    {
      e.preventDefault();
      if (!confirm('Are you sure you want to delete this?'))
        return false;

      this.submit.disabled = true;
      try {
        let res = await remove('{{ base_url }}/products/delete', 
          {
            id: this.id.value
          },
        );

        window.location.href = '{{ base_url }}/products';
      }
      catch(err) {}
      this.submit.disabled = false;
    };

    const isInDataList = async function(value, dataList)
    {
      let found = false;
      let items = dataList.querySelectorAll('option');
      for(let i = 0; i < items.length; i++) {
        if (items[i].value.toLowerCase() === value.toLowerCase()) {
          return items[i].dataset.id;
        }
      }
      return found;
    };

    const fillDataList = async function(url, dataList)
    {
      dataList.innerHTML = "";
      axios.get(url)
        .then(res => {
          const items = res.data.data.sub;

          items.forEach(item => {
            let template = `
              <option value="${item.name}" data-id="${item.id}"></option>
            `;

            dataList.innerHTML += template;
          });
        })
        .catch(err => handleError(err));
    };

    formUpdate.addEventListener('submit', handleFormSubmit);
    formDelete.addEventListener('submit', handleFormDeleteSubmit);
        
    fillDataList('{{ base_url }}/products/categories?q=&mode=all', categories);
    fillDataList('{{ base_url }}/products/units?q=&mode=all', units);

  </script>
{% endblock %}