{% extends "/layouts/main.html.twig" %}

{% block title %}
  Units
{% endblock %}

{% block main %}
  <div class="container">
    <div class="row mb-4 align-items-center g-2">
      <div class="col-md-7">
        <div class="d-flex justify-content-between align-items-center">
          <h1 class="h2 my-0">Unit List</h1>
          <a href="#" class="btn btn-success d-flex align-items-center" role="button" data-toggle="modal" data-target="#modal-unit-add">
            <i class="las la-plus mr-2"></i>
            <span>New</span>
          </a>
        </div>
      </div>
      <form action="{{ base_url }}/products/units" id="form-search" class="input-group col">
        <input type="text" class="form-control" placeholder="Search something..." name="q" aria-label="Search" aria-describedby="search-button">
        <button type="submit" class="btn btn-secondary d-flex align-items-center" id="search-button"><i class="las la-search m-0 d-block"></i></button>
      </form>
    </div>

    <div class="data-cards">
      <div class="row units"></div>
      <div class="loading d-none">
        <h5>Loading...</h5>
        <p><i class="las la-spinner la-spin la-2x m-0"></i></p>
      </div>
    </div>
  </div>

  <!-- Add Modal -->
  <div class="modal fade" id="modal-unit-add" tabindex="-1" aria-labelledby="modal-unit-title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modal-unit-title">Add new unit</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="{{ base_url }}/products/units/new" method="POST" name="create" novalidate>
          <div class="modal-body">
            <div id="alert"></div>
            <div class="row">
              <div class="col-lg-6">
                <label for="unit_name" class="form-label">Unit name</label>
                <input type="text" id="unit_name" class="form-control" placeholder="Box" name="unit_name">
              </div>
            </div>
          </div>  
          <div class="modal-footer">
            <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Create Unit</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- End of Add Modal -->

  <!-- Edit Modal -->
  <div class="modal fade" id="modal-unit-edit" tabindex="-1" aria-labelledby="modal-unit-title-edit" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modal-unit-title-edit">Edit existing unit</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="{{ base_url }}/products/units/update" method="POST" name="update" novalidate>
          <div class="modal-body">
            <div id="alert"></div>
            <input type="hidden" name="id">
            <div class="row">
              <div class="col-lg-6">
                <label for="unit_name_edit" class="form-label">Unit name</label>
                <input type="text" id="unit_name_edit" class="form-control" placeholder="Box" name="unit_name">
              </div>
            </div>
          </div>
          <div class="modal-footer justify-content-between">
            <button type="button" class="btn btn-danger btn-delete"><i class="las la-spinner la-spin la-1x mr-2"></i>Delete</button>
            <div>
              <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
              <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Save Changes</button>
            </div>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- End of Edit Modal -->
{% endblock %}
{% block script %}
  <script src="/js/helpers/base.js"></script>
  <script>
    const modalUnitAdd = document.getElementById('modal-unit-add');
    const modalUnitEdit = document.getElementById('modal-unit-edit');
    const units = document.querySelector('.units');
    const formCreate = document.forms.create;
    const formUpdate = document.forms.update;
    const formSearch = document.getElementById('form-search');
    const masonry = new Masonry(units, {
      percentPosition: true,
      horizontalOrder: true
    });

    // Modal Events
    const resetModalFormHide = function() 
    {
      this.querySelector('form').reset();
      closeAlert();
    };

    const shownModalHandler = function(e) 
    {
      let form = this.querySelector('form');
      form.id.value = e.relatedTarget.getAttribute('data-id');
      form.unit_name.value = e.relatedTarget.getAttribute('data-name');
      form.unit_name.focus();
    };

    modalUnitAdd.addEventListener('hidden.bs.modal', resetModalFormHide);
    modalUnitEdit.addEventListener('hidden.bs.modal', resetModalFormHide);

    modalUnitEdit.addEventListener('shown.bs.modal', shownModalHandler);
    // End of Modal Events

    validate.validators.presence.message = "must not be left empty.";
    const constraints = {
      unit_name: {
        presence: {
          allowEmpty: false
        }
      }
    };

    const handleFormSubmit = async function(e)
    {
      e.preventDefault();

      closeAlert();
      let errors = validate(this, constraints, {format: 'flat'});
      showError(errors || [], this);

      if (errors)
        return false;

      this.submit.disabled = true;
      try {
        const item = await create('{{ base_url }}/products/units/new', 
          {
            name: this.unit_name.value
          }
        );

        response.push(item);
        renderItem(item);
      }
      catch(err) {
        openAlert(err.response.data.error.description, this);
      }
      this.submit.disabled = false;
    };

    const handleFormEditSubmit = async function(e)
    {
      e.preventDefault();

      closeAlert();
      let errors = validate(this, constraints, {format: 'flat'});
      showError(errors || [], this);

      if (errors)
        return false;

      this.submit.disabled = true;
      try {
        const item = await update('{{ base_url }}/products/units/update', 
          {
            id: this.id.value,
            name: this.unit_name.value
          }
        );

        response.forEach((data, index) => {
          if (data.id === item.id) {
            data.name = item.name;
            let card = document.querySelectorAll('.units .card')[index];
            card.querySelector('h5.card-title').innerText = item.name;
            card.querySelector('a').dataset.name = item.name;
            
            // Update UI
            masonry.layout();
          }
        });

        bootstrap.Modal.getInstance(modalUnitEdit)?.hide();
      }
      catch(err) {
        openAlert(err.response.data.error.description, this);
      }
      this.submit.disabled = false;
    };

    const handleFormDeleteSubmit = async function(e)
    {
      e.preventDefault();
      if (!confirm('Are you sure you want to delete this?'))
        return false;
      
      this.disabled = true;
      try {
        const item = await remove('{{ base_url }}/products/units/delete', 
          {
            id: this.closest('form').id.value
          }
        );

        response = response.filter((data, index) => {
          if (data.id === item.id) {
            
            // Delete the UI
            document.querySelectorAll('.units .col-md-4')[index].remove();
            
            // Update the UI
            masonry.reloadItems();
            masonry.layout();

            return false;
          }

          return true;
        });

        // If there is no response
        if (response.length === 0)
          addNoItem(units);

        bootstrap.Modal.getInstance(modalUnitEdit)?.hide();
      }
      catch(err) {
        handleError(err);
      }
      this.disabled = false;
    };

    let url = '{{ base_url }}/products/units?q=';

    const handleFormSearchSubmit = async function(e)
    {
      e.preventDefault();

      let query = encodeURI(this.q.value);
      url = `{{ base_url }}/products/units?q=${query}`;

      await fetch(url, units, renderItem);
    };

    const renderItem = (item) => 
    {
      bootstrap.Modal.getInstance(modalUnitAdd)?.hide();
      units.querySelector('.no-item')?.remove();

      let div = document.createElement('div');
      div.className = "col-md-4 col-lg-3 mb-4";
      let template = `
        <div class="card">
          <div class="card-body">
            <h5 class="card-title">${item.name}</h5>
            <p class="card-text">
              <small class="text-muted">â€” Total Items <span class="badge bg-primary">${item.count ?? 0}</span></small>
            </p>
            <div class="text-right">
              <a href="#" class="btn btn-light text-primary" role="button" data-toggle="modal" data-target="#modal-unit-edit" data-id="${item.id}" data-name="${item.name}">Edit</a>
            </div>
          </div>
        </div>
      `;

      div.innerHTML = template;
      units.appendChild(div);

      masonry.appended(div);
      masonry.layout();
    };

    formCreate.addEventListener('submit', handleFormSubmit);
    formUpdate.addEventListener('submit', handleFormEditSubmit);
    modalUnitEdit.querySelector('.btn-delete').addEventListener('click', handleFormDeleteSubmit);
    formSearch.addEventListener('submit', handleFormSearchSubmit);

    fetch(url, units, renderItem);

    window.addEventListener('scroll', () => {
      if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
        scroll(url, renderItem);
      }
    });
  </script>
{% endblock %}