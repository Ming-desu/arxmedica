{% extends "/layouts/main.html.twig" %}

{% block title %}
  Quotations
{% endblock %}

{% block main %}
  <div class="container">
    <h1 class="h2">Add new quotation</h1>
    <p class="text-muted">Fill up all the required fields.</p>

    <form action="{{ base_url }}/quotations/new" class="row" method="POST" name="quotation" novalidate>
      <div class="col-md-6 col-lg-7">
        <!-- Quotation Information -->
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="m-0">Quotation Information</h5>
            <p class="card-text">
              <small class="text-muted">Specify the subject, description, and other information about the quotation.</small>
            </p>
            <div id="alert"></div>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="purchase_request_number" class="form-label">Purchase request no.</label>
                <input type="text" id="purchase_request_number" class="form-control" name="purchase_request_number" placeholder="xxxx-xxx-xxxx">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="date" class="form-label">Date</label>
                <input type="date" id="date" class="form-control" name="date">
              </div>
            </div>
            <div class="dropdown-divider"></div>
            <div class="mb-2">
              <label for="project_title" class="form-label">Project title</label>
              <input type="text" id="project_title" class="form-control" name="project_title" placeholder="The Outcast of COVID-19">
            </div>
            <div class="mb-2">
              <label for="project_description" class="form-label">Project description</label>
              <textarea id="project_description" class="form-control" name="project_description" rows="4" placeholder="COVID-19 front-liners general medicine and equipments"></textarea>
            </div>
          </div>
        </div>
        <!-- End of Quotation Information -->

        <!-- Recipient Information -->
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="m-0">Recipient Information</h5>
            <p class="card-text">
              <small class="text-muted">To whom we will address the quotation?</small>
            </p>
            <h6>Mailing Address</h6>
            <div class="mb-2">
              <label for="recipient_address_details" class="form-label">Address details</label>
              <input type="text" id="recipient_address_details" class="form-control" name="recipient_address_details" placeholder="#12 Bago St. San Isidro">
            </div>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="recipient_municipality" class="form-label">Municipality/City</label>
                <input type="text" id="recipient_municipality" class="form-control" name="recipient_municipality" placeholder="Balintawak">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="recipient_province" class="form-label">Province</label>
                <input type="text" id="recipient_province" class="form-control" name="recipient_province" placeholder="Quezon">
              </div>
            </div>
            <div class="dropdown-divider"></div>
            <h6>Main Recipient</h6>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="main_recipient_first_name" class="form-label">First name</label>
                <input type="text" id="main_recipient_first_name" class="form-control" name="main_recipient_first_name" placeholder="Johnny">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="main_recipient_last_name" class="form-label">Last name</label>
                <input type="text" id="main_recipient_last_name" class="form-control" name="main_recipient_last_name" placeholder="Smith">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="main_recipient_position" class="form-label">Position</label>
                <input type="text" id="main_recipient_position" class="form-control" name="main_recipient_position" placeholder="Executive Director">
              </div>
            </div>
            <div class="dropdown-divider"></div>
            <h6>Secondary Recipient(Optional)</h6>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="secondary_recipient_first_name" class="form-label">First name</label>
                <input type="text" id="secondary_recipient_first_name" class="form-control" name="secondary_recipient_first_name" placeholder="Jane">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="secondary_recipient_last_name" class="form-label">Last name</label>
                <input type="text" id="secondary_recipient_last_name" class="form-control" name="secondary_recipient_last_name" placeholder="Doe">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="secondary_recipient_position" class="form-label">Position</label>
                <input type="text" id="secondary_recipient_position" class="form-control" name="secondary_recipient_position" placeholder="Secretary">
              </div>
            </div>
          </div>
        </div>
        <!-- End of Recipient Information -->
      </div>
      <div class="col-md-6 col-lg-5">
        <!-- Representative Information -->
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="m-0">Representative Information</h5>
            <p class="card-text">
              <small class="text-muted">The one who personally written the quotation.</small>
            </p>
            <div class="row">
              <div class="col-lg-6 mb-2">
                <label for="representative_first_name" class="form-label">First name</label>
                <input type="text" id="representative_first_name" class="form-control" name="representative_first_name" placeholder="John Paul">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="representative_last_name" class="form-label">Last name</label>
                <input type="text" id="representative_last_name" class="form-control" name="representative_last_name" placeholder="Torres">
              </div>
              <div class="col-lg-6 mb-2">
                <label for="representative_contact_number" class="form-label">Contact number</label>
                <input type="text" id="representative_contact_number" class="form-control" name="representative_contact_number" placeholder="0961-xxxx-xxx">
              </div>
            </div>
          </div>
        </div>
        <!-- End of Representative Information -->

        <!-- Quotation Items -->
        <div class="card mb-4">
          <div class="card-body">
            <h5 class="m-0">Quotation Items</h5>
            <p class="card-text">
              <small class="text-muted">The products to be sent to the recipient.</small>
            </p>
            <div class="mb-2">
              <label for="product_name" class="form-label">Product name</label>
              <input type="text" id="product_name" class="form-control" name="product_name" placeholder="Search for an item...">
            </div>

            <!-- Product Items -->
            <div class="product-items">
              <div class="loading d-none text-center py-5">
                <h5>Loading...</h5>
                <p><i class="las la-spinner la-spin la-2x m-0"></i></p>
              </div>
            </div>
            <!-- End of Product Items -->
          </div>

          <!-- Quotation Item List -->
          <ul class="list-group list-group-flush quotation-items"></ul>
          <!-- End of Quotation Item List -->
        </div>
        <!-- End of Quotation Items -->
      </div>
      <div class="text-right">
        <a href="{{ base_url }}/quotations" class="btn btn-light mr-2">Cancel</a>
        <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Create Quotation</button>
      </div>
    </form>
  </div>
  
  <!-- Modal Qty -->
  <div class="modal fade" id="modal-qty" tabindex="-1" aria-labelledby="modal-qty-title" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modal-qty-title">Product Information</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="" method="POST" novalidate>
          <div class="modal-body">
            <div id="alert"></div>
            <input type="hidden" name="id">
            <div class="row">
              <div class="col-lg-6">
                <label for="quantity" class="form-label">Quantity</label>
                <input type="number" id="quantity" class="form-control" placeholder="0" name="quantity">
              </div>
              <div class="col-lg-6">
                <label for="unit_cost" class="form-label">Unit cost</label>
                <div class="input-group">
                  <span class="input-group-text">â‚±</span>
                  <input type="number" id="unit_cost" class="form-control" placeholder="0" name="unit_cost">
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Confirm</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- End of Modal Qty -->

  <!-- Modal Edit Qty -->
  <div class="modal fade" id="modal-qty-edit" tabindex="-1" aria-labelledby="modal-qty-title-edit" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="modal-qty-title-edit">Product Information</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <form action="" method="POST" novalidate>
          <div class="modal-body">
            <div id="alert"></div>
            <input type="hidden" name="id">
            <div class="row">
              <div class="col-lg-6">
                <label for="quantity_edit" class="form-label">Quantity</label>
                <input type="number" id="quantity_edit" class="form-control" placeholder="0" name="quantity">
              </div>
              <div class="col-lg-6">
                <label for="unit_cost_edit" class="form-label">Unit cost</label>
                <div class="input-group">
                  <span class="input-group-text">â‚±</span>
                  <input type="number" id="unit_cost_edit" class="form-control" placeholder="0" name="unit_cost">
                </div>
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-light" data-dismiss="modal">Cancel</button>
            <button type="submit" class="btn btn-primary" name="submit"><i class="las la-spinner la-spin la-1x mr-2"></i>Save Changes</button>
          </div>
        </form>
      </div>
    </div>
  </div>
  <!-- End of Modal Edit Qty -->
{% endblock %}
{% block script %}
  <script src="/js/helpers/base.js"></script>
  <script>
    let products = [];
    const form = document.forms.quotation;
    const productItems = document.querySelector('.product-items');
    const modalQty = document.getElementById('modal-qty');
    const modalQtyEdit = document.getElementById('modal-qty-edit');

    // Product Quantity Logic

    // Focus the input when the modal is visible
    const shownModalHandler = function(e) {
      let form = this.querySelector('form');
      form.id.value = e.relatedTarget.getAttribute('data-id');
      form.quantity.focus();
    }

    // Focus the input when the modal is visible
    const shownModalEditHandler = function(e) {
      let form = this.querySelector('form');
      let id = e.relatedTarget.getAttribute('data-id');

      for (let i = 0; i < products.length; ++i) {
        
        // Ensure that the data is not null
        if (products[i] === null)
          continue;

        if (products[i].id === id) {
          form.id.value = id;
          form.quantity.value = products[i].quantity;
          form.unit_cost.value = products[i].unit_cost;
          break;
        }
      }

      form.quantity.focus();
    }

    // Resets the form inside the modal when hidden
    const resetModalFormHide = function() {
      this.querySelector('form').reset();
      closeAlert();
    }

    // Validation constraints
    validate.validators.presence.message = "must not be left empty.";
    const modalQtyConstraints = {
      quantity: {
        presence: {
          allowEmpty: false
        },
        numericality: {
          greaterThan: 0
        }
      },
      unit_cost: {
        presence: {
          allowEmpty: false
        },
        numericality: {
          greaterThan: 0
        }
      }
    };

    // Handles the submmission of form inside the modal
    const handleFormModalQtySubmit = async function(e) {
      e.preventDefault();

      // Close any alerts that are visible
      closeAlert();

      // Validate the form itself
      let errors = validate(this, modalQtyConstraints, {format: 'flat'});
      
      // Show the error if there is available
      showError(errors || [], this);

      if (errors)
        return;

      // Toggle the disable state
      this.submit.disabled = true;
      
      // Add the quotation item
      await addQuotationItem(this.id.value, this.quantity.value, this.unit_cost.value);
      
      // Toggle the disable state
      this.submit.disabled = false;
    }

    // Adds the quotation item to the dataset
    const addQuotationItem = async (id, quantity, unit_cost) => {
      let item = {}; 
      
      // Gets the item from the response 
      for (let i = 0; i < response.length; ++i) {
        if (response[i].id === id) {
          item = response[i];
          break;
        }
      }

      // Render the data to the UI
      await renderQuotationItem(item, parseInt(quantity), parseFloat(unit_cost));
      
      // Close any open modal
      bootstrap.Modal.getInstance(modalQty)?.hide();
      bootstrap.Modal.getInstance(modalQtyEdit)?.hide();
    };

    // Renders the data to the UI
    const renderQuotationItem = async (ref_item, quantity, unit_cost) => {
      let container = document.querySelector('.quotation-items');
      let item = ref_item;
      item.quantity = quantity;
      item.unit_cost = unit_cost;

      let index = 0;
      let isFound = false;
      
      // Check if there are currently item
      if (products.length > 0) {
        for (let i = 0; i < products.length; ++i) {

          // Ensure that the data is not null
          if (products[i] === null)
            continue;

          // Check if the data already exists in the dataset
          if (products[i].id === item.id) {

            // Update the values of the data in dataset
            products[i].quantity = quantity;
            products[i].unit_cost = unit_cost;
            isFound = true;

            // Update the UI elements for user experience
            let quotationItem = document.querySelector(`.quotation-item [data-index="${i}"]`).closest('.quotation-item');
            quotationItem.querySelector('p small').innerText = `(${products[i].quantity}) â‚± ${products[i].unit_cost.toFixed(2)}`;
            quotationItem.querySelector('p span').innerText = `â€” â‚± ${(parseFloat(products[i].quantity) * products[i].unit_cost).toFixed(2)}`;

            break;
          }
        }
      }

      // Check if the flag is true
      if (isFound) 
        return;

      // If the function reach up to this point
      // It means that we are adding the data for the first time
      products.push(item);

      // Prepare the UI elements 
      let li = document.createElement('li');
      li.className = "list-group-item quotation-item";

      let template = `
        <div class="quotation-item-description py-2">
          <div class="d-flex justify-content-between align-items-start">
            <h6 class="m-0 quotation-item-title">${item.brand || 'Generic'} ${item.description}</h6>
            <span class="badge rounded-pill bg-info quotation-item-subtitle">${item.unit}</span>
          </div>
          <p class="m-0 text-muted d-flex justify-content-between align-items-start">
            <small>(${item.quantity}) â‚± ${item.unit_cost.toFixed(2)}</small>
            <span>â€” â‚± ${(parseFloat(item.quantity) * item.unit_cost).toFixed(2)}</span>
          </p>
        </div>
        <div class="quotation-item-actions d-flex flex-column justify-content-center">
          <button type="button" class="btn btn-sm btn-light mb-1" data-toggle="modal" data-target="#modal-qty-edit" data-id="${item.id}"><i class="las la-pen la-1x m-0" data-id="${item.id}"></i></button>
          <button type="button" class="btn btn-sm btn-danger btn-remove-quotation-item" data-index="${products.length - 1}"><i class="las la-trash la-1x m-0"></i></button>
        </div>
      `;

      // Append it to the container
      li.innerHTML = template;
      container.append(li);
    };

    modalQty.addEventListener('hidden.bs.modal', resetModalFormHide);
    modalQty.addEventListener('shown.bs.modal', shownModalHandler);
    modalQty.querySelector('form').addEventListener('submit', handleFormModalQtySubmit);

    modalQtyEdit.addEventListener('hidden.bs.modal', resetModalFormHide);
    modalQtyEdit.addEventListener('shown.bs.modal', shownModalEditHandler);
    modalQtyEdit.querySelector('form').addEventListener('submit', handleFormModalQtySubmit);

    // Handles the product search function
    const handleProductNameKeyUp = async function() {
      let value = this.value;
      let items = productItems.querySelectorAll('.product-item');

      // Iterate each UI element
      for (let i = 0; i < items.length; ++i) {
        
        // Check if the current value being searched exists to the UI element itself
        if (items[i].querySelector('.product-item-title').innerText.toLowerCase().indexOf(value.toLowerCase()) > -1)
          items[i].classList.remove('d-none');
        else
          // Hide the UI to the user
          items[i].classList.add('d-none');
      }
    };

    form.product_name.addEventListener('keyup', handleProductNameKeyUp);

    // End of Product Quantity Logic

    // Renders the Product Item to the UI
    const renderItem = item => {
      let div = document.createElement('div');
      div.className = "card-body bg-light rounded product-item";

      let template = `
        <h6 class="card-title d-flex justify-content-between align-items-center">
          <span class="product-item-title">${item.brand || 'Generic'} ${item.description}</span>
          <span class="badge rounded-pill bg-info">${item.unit}</span>
        </h6>
        <div class="text-right">
          <button type="button" class="btn btn-sm btn-success" data-toggle="modal" data-target="#modal-qty" data-id="${item.id}">Add Item</button>
        </div>
      `;

      div.innerHTML = template;
      productItems.append(div);
    };

    fetch( '{{ base_url }}/products?q=&mode=all', null, renderItem );

    const constraints = {
      purchase_request_number: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: "[a-z0-9\-]+",
          flags: 'i',
          message: 'can only contain a-z, 0-9, and a dash'
        }
      },
      date: {
        presence: {
          allowEmpty: false
        }
      },
      project_title: {
        presence: {
          allowEmpty: false
        }
      },
      project_description: {
        presence: {
          allowEmpty: false
        }
      },
      recipient_address_details: {
        presence: {
          allowEmpty: false
        }
      },
      recipient_municipality: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      recipient_province: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      main_recipient_first_name: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      main_recipient_last_name: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      main_recipient_position: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      secondary_recipient_first_name: {
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      secondary_recipient_last_name: {
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      secondary_recipient_position: {
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      representative_first_name: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      representative_last_name: {
        presence: {
          allowEmpty: false
        },
        format: {
          pattern: '[a-z ]+',
          flags: 'i',
          message: 'can only contain a-z and space'
        }
      },
      representative_contact_number: {
        format: {
          pattern: '[0-9]+',
          message: 'can only contain 0-9'
        }
      }
    };

    const hasQuotations = () => {
      return document.querySelectorAll('.quotation-item').length === 0 ? ['Quotation items cannot be empty.'] : undefined;
    };

    const removeNull = x => {
      return x.filter(v => {
        return v !== null;
      });
    };
    
    const handleFormSubmit = async function(e) {
      e.preventDefault();

      closeAlert();
      let errors = validate(this, constraints, {format: 'flat'}) ?? hasQuotations();
      showError(errors || []);

      if (errors)
        return;

      this.submit.disabled = true;
      try {
        let data = {
          pr_no: this.purchase_request_number.value,
          date_issued: this.date.value,
          project_title: this.project_title.value,
          project_description: this.project_description.value,
          recipient_address_details: this.recipient_address_details.value,
          recipient_municipality: this.recipient_municipality.value,
          recipient_province: this.recipient_province.value,
          main_recipient_first_name: this.main_recipient_first_name.value,
          main_recipient_last_name: this.main_recipient_last_name.value,
          main_recipient_position: this.main_recipient_position.value,
          secondary_recipient_first_name: this.secondary_recipient_first_name.value,
          secondary_recipient_last_name: this.secondary_recipient_last_name.value,
          secondary_recipient_position: this.secondary_recipient_position.value,
          representative_first_name: this.representative_first_name.value,
          representative_last_name: this.representative_last_name.value,
          representative_contact_number: this.representative_contact_number.value,
          quotation_items: removeNull(products)
        };

        const item = await create(this.action, data);

        this.reset();
        products = [];
        document.querySelector('.quotation-items').innerHTML = "";
      }
      catch(err) {}
      this.submit.disabled = false;
    };

    form.addEventListener('submit', handleFormSubmit);
    
    window.addEventListener('click', e => {
      if (e.target.matches('.btn-remove-quotation-item') || e.target.closest('.btn-remove-quotation-item')) {
        if (!confirm('Are you sure you want to remove this item?'))
          return;

        let target = e.target.closest('.btn-remove-quotation-item') ?? e.target;
        let index = parseInt(target.getAttribute('data-index'));
        document.querySelector(`.quotation-item [data-index="${index}"]`).closest('.quotation-item').remove();

        products[index] = null;
      }
    })
  </script>
{% endblock %}